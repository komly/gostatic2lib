package main

import (
	"bytes"
	"compress/gzip"
	"flag"
	"fmt"
	"go/format"
	"io"
	"os"
	"path/filepath"
	"regexp"
	"strings"
)

var pkgName = flag.String("package", "static", "Package name")
var staticPath = flag.String("path", "./html", "Directory with static files")
var outFile = flag.String("out", "static.go", "Output file name")

func main() {
	flag.Parse()

	absStaticPath, err := filepath.Abs(*staticPath)
	if err != nil {
		fmt.Print(err)
		os.Exit(1)
	}

	content := &bytes.Buffer{}
	if err := filepath.Walk(absStaticPath, func(path string, f os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		if f == nil || f.IsDir() {
			return nil
		}

		fileName := strings.TrimPrefix(path, absStaticPath)

		buf := &bytes.Buffer{}
		goBytes := NewGoByteWriter(buf)
		gz, _ := gzip.NewWriterLevel(goBytes, gzip.BestCompression)

		file, err := os.Open(path)
		if err != nil {
			return err
		}

		_, err = io.Copy(gz, file)

		file.Close()
		gz.Close()

		if err != nil {
			return err
		}

		content.WriteString("\"")
		content.WriteString(fileName)
		content.WriteString("\": []byte{\n")
		content.Write(buf.Bytes())
		content.WriteString("\n},\n")

		return nil
	}); err != nil {
		fmt.Print(err)
		os.Exit(1)
	}

	result := regexp.MustCompilePOSIX(">>>PKG_NAME<<<").ReplaceAll(template, []byte(*pkgName))
	result = regexp.MustCompilePOSIX(">>>FILES<<<").ReplaceAll(result, content.Bytes())

	result, err = format.Source(result)
	if err != nil {
		fmt.Print(err)
		os.Exit(1)
	}

	of, err := os.Create(*outFile)
	defer of.Close()
	if err != nil {
		fmt.Print(err)
		os.Exit(1)
	}

	of.Write(result)
}

var template = []byte(`// It's autogenerated file. Do not modify it.
// Generated by https://github.com/sergei-svistunov/gostatic2lib

package >>>PKG_NAME<<<

import (
	"mime"
	"net/http"
	"strings"
)

type HTTPHandler struct {
	files map[string][]byte
}

func NewHTTPHandler() *HTTPHandler {
	return &HTTPHandler{
		files: map[string][]byte{
			>>>FILES<<<
		},
	}
}

func (h *HTTPHandler) ServeFile(w http.ResponseWriter, r *http.Request, name string) {
	file, exists := h.files[name]
	if !exists || strings.LastIndex(name, ".") < 1 {
		http.Error(w, http.StatusText(http.StatusNotFound), http.StatusNotFound)
		return
	}

	w.Header().Set("Content-Type", mime.TypeByExtension(name[strings.LastIndex(name, "."):]))
	w.Header().Set("Content-Encoding", "gzip")

	w.Write(file)
}

func (h *HTTPHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	fileName := r.URL.Path
	if fileName == "/" {
		fileName = "/index.html"
	}

	file, exists := h.files[fileName]
	if !exists || strings.LastIndex(fileName, ".") < 1 {
		http.Error(w, http.StatusText(http.StatusNotFound), http.StatusNotFound)
		return
	}

	w.Header().Set("Content-Type", mime.TypeByExtension(fileName[strings.LastIndex(fileName, "."):]))
	w.Header().Set("Content-Encoding", "gzip")

	w.Write(file)
}
`)
